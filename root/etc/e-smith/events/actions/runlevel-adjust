#!/usr/bin/perl

#
# Copyright (C) 2012 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use NethServer::Service;
use File::Basename;

my $event = shift || die("Missing event argument!");
my $confDb = esmith::ConfigDB->open_ro();
my $errors = 0;

my %configured = {};
my @files = glob "/etc/e-smith/db/configuration/defaults/*";
for my $file (@files) {
    open(FH, "$file/type") or next;
    my $type = do{local $/; <FH>;};
    close FH;
    chomp $type;
    if ($type eq "service") {
        $configured{basename($file)} = 1;
    }
}

foreach my $serviceRecord ($confDb->get_all_by_prop('type' => 'service')) {

    my $serviceName = $serviceRecord->key;
    
    #
    # Test if service is orphan: service record exists but no db default defined
    #
    if( ! exists($configured{$serviceName})) {
        warn "[INFO] Stopping orphan service `$serviceName`\n";
	NethServer::Service::stop($serviceName) || $errors++;
	NethServer::Service::set_service_startup($serviceName, 0) || $errors++;
        next;
    }

    #
    # Synchronize service status with "status" prop:
    #
    if(NethServer::Service::is_enabled($serviceName, $confDb)) {
	NethServer::Service::start($serviceName) || $errors ++;
	NethServer::Service::set_service_startup($serviceName, 1) || $errors++;
    } else {
	NethServer::Service::stop($serviceName) || $errors ++;
	NethServer::Service::set_service_startup($serviceName, 0) || $errors++;
    }
    

}


exit($errors > 0 ? 1 : 0);
