#!/usr/bin/perl -w
#----------------------------------------------------------------------
# copyright (C) 2005 Mitel Networks Corporation
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 		
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 		
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
# 
#----------------------------------------------------------------------
package esmith;

use strict;
use Errno;
use DirHandle;
use NethServer::Service;

my $event = shift || die "must give event name parameter";
chdir "/etc/e-smith/events/$event" or die "Couldn't chdir to event directory /etc/e-smith/events/$event: $!";
my $dh = DirHandle->new("services2adjust");

exit(0) unless $dh; # Nothing to do

use esmith::ConfigDB;
use esmith::util;

my %param2char = (
	down => 'd',
	stop => 'd',
	up => 'u',
	start => 'u',
	restart => 't',
	sigterm => 't',
	adjust => 'h',
	reload => 'h',
	sighup => 'h',
	sigusr1 => '1',
	sigusr2 => '2',
	once => 'o',
	pause => 'p',
	alarm => 'a',
	interrupt => 'i',
	quit => 'q',
	kill => 'k',
	exit => 'x',
    );

sub adjust_supervised_service
{
    warn 'adjust_supervised_service is no longer supported in NethServer';
}

my $conf = esmith::ConfigDB->open_ro || die "Couldn't open config db";

foreach my $service (grep { !/^\./ } $dh->read())
{
    my $s = $conf->get($service);
    if( ! $s) 
    {
	warn "No conf db entry for service $service\n";
	next;
    } elsif ( ! NethServer::Service::is_enabled($service)) {
	warn "Service $s is not enabled\n";
	next;
    }
    my $f =  "services2adjust/$service";
    
    my @actions;
    if (-l "$f")
    {
	@actions = ( readlink "$f" );
    }
    else
    {
	if (open(F, $f))
	{
	    # Read list of actions from the file, and untaint
	    @actions = map { chomp; /([a-z]+)/ ; $1 } <F>;
	    close(F);
	}
	else
	{
	    warn "Could not open $f: $!";
	}
    }


    foreach (@actions)
    {
	warn "adjusting service $service ($_)\n";
	esmith::util::serviceControl(
	    NAME => $service,
	    ACTION => $_,
	    );
    }

}

